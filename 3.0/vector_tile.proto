package vector_tile;

option optimize_for = LITE_RUNTIME;

message Tile {

        // GeomType is described in section 4.3.4 of the specification
        enum GeomType {
             UNKNOWN = 0;
             POINT = 1;
             LINESTRING = 2;
             POLYGON = 3;
        }

        // Variant type encoding
        // The use of values is described in section 4.1 of the specification
        message Value {
                // Exactly one of these values must be present in a valid message
                optional string string_value = 1;
                optional float float_value = 2;
                optional double double_value = 3;
                optional int64 int_value = 4;
                optional uint64 uint_value = 5;
                optional sint64 sint_value = 6;
                optional bool bool_value = 7;

                extensions 8 to max;
        }

        // Features are described in section 4.2 of the specification
        message Feature {
                optional uint64 id = 1 [ default = 0 ];

                // Attributes of this feature are encoded as repeated pairs of
                // integers.
                // A detailed description of attributes is located in sections
                // 4.2 and 4.4 of the specification
                repeated uint32 attributes = 2 [ packed = true ];

                // The type of geometry stored in this feature.
                optional GeomType type = 3 [ default = UNKNOWN ];

                // Contains a stream of commands and parameters (vertices).
                // A detailed description on geometry encoding is located in 
                // section 4.3 of the specification.
                repeated uint32 geometry = 4 [ packed = true ];
                
                // Additional attributes (or all the attributes) of this feature may be
                // encoded as repeated pairs of 64-bit integers, to take
                // advantage of inline encoding of small values,
                // improved compression from use of repeated values,
                // and support for list and map values.
                //
                // This message may only be used if the layer version is >= 3.
                //
                // The inline_attributes field is much like the attributes field in that it is a pair of
                // integers that reference key and value pairs. However, the value reference
                // is a "complex_value" that combines a type and an index.
                // 
                // The "key_index" is much like the key index in the use for attributes, but instead
                // of pointing into layer.keys, it points into layer.attribute_pool.keys.
                //
                // An complex value has two parts: the lowest 4 bits are the type bits,
                // and the remaining bits are the parameter bits. What is stored in the parameter
                // bits is dependent on the contents of the type bits. For example for inline values,
                // the parameter field is not an index but simply a value. For other types it is
                // an index position into a value storage of the layer.
                // 
                // uint64_t type = complex_value & 0x0F; // least significant 4 bits
                // uint64_t parameter = complex_value >> 4;
                // 
                //     Type     | Id  | Parameter
                // ---------------------------------
                // string       |  0  | index into layer string_values
                // float        |  1  | index into layer float_values
                // double       |  2  | index into layer double_values
                // uint         |  3  | index into layer int_values
                // sint         |  4  | index into layer int_values (values are zigzag encoded)
                // inline uint  |  5  | value of unsigned integer (values between 0 to 2^60-1)
                // inline sint  |  6  | value of zigzag-encoded integer (values between -2^59 to 2^59-1)
                // bool/null    |  7  | value of 0 = false, 1 = true, 2 = null
                // list         |  8  | value is the number of elements to follow:
                //              |     |   each item in the list is a complex value
                // map          |  9  | value is the number of pairs of elements to follow:
                //              |     |   each pair is an index into layer keys
                //              |     |   followed by a complex_value for the value
                //
                // Value types 10 through 15 are reserved for definition in future versions
                // of this specification. Implementations MUST treat complex_values of these
                // types as opaque values that are not followed by additional sub-attributes.
                // In the future they may refer to additional inline types or additional
                // reference types.
                repeated uint64 inline_attributes = 5 [ packed = true ];
        }

        message StringValues {
                repeated string keys = 1;
        }

        // Layers are described in section 4.1 of the specification
        message Layer {
                // Any compliant implementation must first read the version
                // number encoded in this message and choose the correct
                // implementation for this version number before proceeding to
                // decode other parts of this message.
                required uint32 version = 15 [ default = 1 ];

                required string name = 1;

                // The actual features in this tile.
                repeated Feature features = 2;

                // Dictionary encoding for keys
                repeated string keys = 3;

                // Dictionary encoding for values
                repeated Value values = 4;

                // Although this is an "optional" field it is required by the specification.
                // See https://github.com/mapbox/vector-tile-spec/issues/47
                optional uint32 extent = 5 [ default = 4096 ];

                optional StringValues attribute_pool = 6;
                repeated float float_values = 7 [ packed = true ];
                repeated double double_values = 8 [ packed = true ];
                repeated fixed64 int_values = 9 [ packed = true ];

                extensions 16 to max;
        }

        repeated Layer layers = 3;

        extensions 16 to 8191;
}
